[{"path":"https://ethan-young.github.io/multitool/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 multitool authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ethan-young.github.io/multitool/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Young. Author, maintainer. Stefan Vermeent. Author.","code":""},{"path":"https://ethan-young.github.io/multitool/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Young E, Vermeent S (2022). multitool: Tools Running Multiverse Style Analyses. R package version 0.0.0.9000, https://ethan-young.github.io/multitool/.","code":"@Manual{,   title = {multitool: Tools for Running Multiverse Style Analyses},   author = {Ethan Young and Stefan Vermeent},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://ethan-young.github.io/multitool/}, }"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"multitool","dir":"","previous_headings":"","what":"Tools for Running Multiverse Style Analyses","title":"Tools for Running Multiverse Style Analyses","text":"goal multitool …","code":""},{"path":"https://ethan-young.github.io/multitool/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Running Multiverse Style Analyses","text":"can install development version multitool GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ethan-young/multitool\")"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tools for Running Multiverse Style Analyses","text":"basic example shows solve common problem:","code":"library(tidyverse) #> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── #> ✔ ggplot2 3.3.6     ✔ purrr   0.3.4 #> ✔ tibble  3.1.7     ✔ dplyr   1.0.9 #> ✔ tidyr   1.2.0     ✔ stringr 1.4.0 #> ✔ readr   2.1.2     ✔ forcats 0.5.1 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() library(multitool)"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"simulate-some-data","dir":"","previous_headings":"","what":"Simulate some data","title":"Tools for Running Multiverse Style Analyses","text":"","code":"the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"create-a-variable-grid","dir":"","previous_headings":"","what":"Create a variable grid","title":"Tools for Running Multiverse Style Analyses","text":"","code":"my_var_grid <-   create_var_grid(     .df = the_data,     iv  = c(iv1, iv2, iv3),     mod = c(mod1, mod2, mod3),     dv  = c(dv1, dv2),     cov = c(cov1, cov2)   ) #> cov variable group has 2 alternative variables #> dv variable group has 2 alternative variables #> iv variable group has 3 alternative variables #> mod variable group has 3 alternative variables #> 36 combinations (2*2*3*3 = 36)"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"create-filter-grid","dir":"","previous_headings":"","what":"Create filter grid","title":"Tools for Running Multiverse Style Analyses","text":"","code":"my_filter_grid <-   create_filter_grid(     .df = the_data,     include1 == 0,     include2 != 3,     include2 != 2,     scale(include3) > -2.5   ) #> filters involving include1 has 2 alternative filtering criteria #> filters involving include2 has 3 alternative filtering criteria #> filters involving include3 has 2 alternative filtering criteria #> 12 combinations (2*3*2 = 12)"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"create-model-grid","dir":"","previous_headings":"","what":"Create model grid","title":"Tools for Running Multiverse Style Analyses","text":"","code":"my_model_grid <-   create_model_grid(     lm({dv} ~ {iv} * {mod}),     lm({dv} ~ {iv} * {mod} + {cov})   ) #> Your model has 2 alternatives"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"add-arbitrary-code","dir":"","previous_headings":"","what":"Add arbitrary code","title":"Tools for Running Multiverse Style Analyses","text":"","code":"#Add pre-processing code before model is fit (but after filtering) my_preprocess <-   create_preprocess(     mutate({iv} := scale({iv}) |> as.numeric(), {mod} := scale({mod}) |> as.numeric())   ) # Code to execute after analysis is fit my_postprocess <-   create_postprocess(     aov()   )"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"combine-all-grids-together","dir":"","previous_headings":"","what":"Combine all grids together","title":"Tools for Running Multiverse Style Analyses","text":"","code":"my_full_grid <-   combine_all_grids(     the_data,     my_var_grid,     my_filter_grid,     my_model_grid,     my_preprocess,     my_postprocess   ) #> cov (variable) has 2 alternatives #> dv (variable) has 2 alternatives #> iv (variable) has 3 alternatives #> mod (variable) has 3 alternatives #> include1 (filter) has 2 alternatives #> include2 (filter) has 3 alternatives #> include3 (filter) has 2 alternatives #> model has 2 alternatives #> 864 combinations (2*2*3*3*2*3*2*2 = 864)"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"run-a-universe","dir":"","previous_headings":"","what":"Run a universe","title":"Tools for Running Multiverse Style Analyses","text":"","code":"run_universe(my_full_grid, 1) #> # A tibble: 1 × 4 #>   decision data_pipeline    lm               aov              #>      <dbl> <list>           <list>           <list>           #> 1        1 <tibble [1 × 2]> <tibble [1 × 5]> <tibble [1 × 5]>"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"run-a-multiverse","dir":"","previous_headings":"","what":"Run a multiverse","title":"Tools for Running Multiverse Style Analyses","text":"","code":"run_multiverse(my_full_grid[1:10,]) #> # A tibble: 10 × 9 #>    decision variables        filters  preprocess model postprocess data_pipeline #>       <int> <list>           <list>   <list>     <chr> <list>      <list>        #>  1        1 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #>  2        2 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #>  3        3 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #>  4        4 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #>  5        5 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #>  6        6 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #>  7        7 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #>  8        8 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #>  9        9 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #> 10       10 <tibble [1 × 4]> <tibble> <tibble>   lm(d… <tibble>    <tibble>      #> # … with 2 more variables: lm <list>, aov <list>"},{"path":"https://ethan-young.github.io/multitool/reference/add_corrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — add_corrs","title":"Title — add_corrs","text":"Title","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_corrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — add_corrs","text":"","code":"add_corrs(   .df,   var_set,   variables,   focus = NULL,   stretch = FALSE,   pair_ns = TRUE,   use = \"pairwise.complete.obs\",   method = \"pearson\" )"},{"path":"https://ethan-young.github.io/multitool/reference/add_corrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — add_corrs","text":".df original data.frame (e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. var_set character string. descriptive name correlation matrix. variables variables like correlations. variables passed link[corrr]{correlate}. can also use tidyselect select variables. focus variables like run link[corrr]{focus}. stretch logical. Whether like add long form correlation list computed link[corrr]{stretch}. pair_ns logical. Whether like add sample sizes table correlation computed link[corrr]{pair_n}. use optional character string indicating handle missing values. one \"everything\", \".obs\", \"complete.obs\", \"na..complete\", \"pairwise.complete.obs\". method character string indicating correlation method used link[corrr]{correlate}. default \"peasron\".","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_corrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — add_corrs","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_corrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — add_corrs","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_preprocess(process_name = \"scale_iv\", 'mutate({ivs} = scale({ivs}))') |>   add_preprocess(process_name = \"scale_mod\", mutate({mods} := scale({mods}))) |>   add_model(lm({dvs} ~ {ivs} * {mods})) |>   add_model(lm({dvs} ~ {ivs} * {mods} + cov1)) |>   add_postprocess(\"aov\", aov()) |>   add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>   add_summary_stats(\"dv_stats\", starts_with(\"dv\"), c(\"skewness\", \"kurtosis\")) |>   add_corrs(\"predictors\", matches(\"iv|mod|cov\"), focus = c(cov1,cov2)) |>   add_corrs(\"outcomes\", matches(\"dv\")) #> # A tibble: 27 × 3 #>    type      group    code                           #>    <chr>     <chr>    <chr>                          #>  1 variables ivs      iv1                            #>  2 variables ivs      iv2                            #>  3 variables ivs      iv3                            #>  4 variables dvs      dv1                            #>  5 variables dvs      dv2                            #>  6 variables mods     mod1                           #>  7 variables mods     mod2                           #>  8 variables mods     mod3                           #>  9 filters   include1 include1 == 0                  #> 10 filters   include1 include1 %in% unique(include1) #> # … with 17 more rows"},{"path":"https://ethan-young.github.io/multitool/reference/add_cron_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Cronbach's Alpha to a multiverse pipeline — add_cron_alpha","title":"Add Cronbach's Alpha to a multiverse pipeline — add_cron_alpha","text":"Add Cronbach's Alpha multiverse pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_cron_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Cronbach's Alpha to a multiverse pipeline — add_cron_alpha","text":"","code":"add_cron_alpha(.df, scale_name, items, keys = NULL)"},{"path":"https://ethan-young.github.io/multitool/reference/add_cron_alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Cronbach's Alpha to a multiverse pipeline — add_cron_alpha","text":".df original data.frame (e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. scale_name character string. Indicates name scale measure measured items indicators items. items items (variables) comprise scale measure. variables passed link[psych]{alpha}. can also use tidyselect select variables. keys optional numeric vector indicating score items. 1 keyed normal directino -1 reverse scored. length keys must items.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_cron_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Cronbach's Alpha to a multiverse pipeline — add_cron_alpha","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_cron_alpha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Cronbach's Alpha to a multiverse pipeline — add_cron_alpha","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_cron_alpha(\"my_scale\", c(iv1,iv2,iv3)) #> # A tibble: 16 × 3 #>    type        group    code                                   #>    <chr>       <chr>    <chr>                                  #>  1 variables   ivs      iv1                                    #>  2 variables   ivs      iv2                                    #>  3 variables   ivs      iv3                                    #>  4 variables   dvs      dv1                                    #>  5 variables   dvs      dv2                                    #>  6 variables   mods     mod1                                   #>  7 variables   mods     mod2                                   #>  8 variables   mods     mod3                                   #>  9 filters     include1 include1 == 0                          #> 10 filters     include1 include1 %in% unique(include1)         #> 11 filters     include2 include2 != 3                          #> 12 filters     include2 include2 != 2                          #> 13 filters     include2 include2 %in% unique(include2)         #> 14 filters     include3 scale(include3) > -2.5                 #> 15 filters     include3 include3 %in% unique(include3)         #> 16 cron_alphas my_scale select(c(c(iv1, iv2, iv3))) |> alpha()"},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":null,"dir":"Reference","previous_headings":"","what":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":"Add filtering/exclusion criteria multiverse pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":"","code":"add_filters(.df, ...)"},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":".df original data.frame (e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. ... logical expressions used filter separated commas. Expressions quoted.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) #> # A tibble: 6 × 3 #>   type    group    code                           #>   <chr>   <chr>    <chr>                          #> 1 filters include1 include1 == 0                  #> 2 filters include1 include1 %in% unique(include1) #> 3 filters include2 include2 != 3                  #> 4 filters include2 include2 %in% unique(include2) #> 5 filters include3 scale(include3) > -2.5         #> 6 filters include3 include3 %in% unique(include3)"},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a model and formula to a multiverese pipeline — add_model","title":"Add a model and formula to a multiverese pipeline — add_model","text":"Add model formula multiverese pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a model and formula to a multiverese pipeline — add_model","text":"","code":"add_model(.df, code)"},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a model and formula to a multiverese pipeline — add_model","text":".df original data.frame (e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. code literal model syntax like run. can use glue inside formulas dynamically generate variable names based variable grid. example, make variable grid two versions IVs (e.g., iv1 iv2), can write formula like : lm(happiness ~ {iv} + control_var). requirement variables written formula actually exist underlying data. also responsible loading packages run particular model (e.g., lme4 mixed-models)","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a model and formula to a multiverese pipeline — add_model","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a model and formula to a multiverese pipeline — add_model","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_preprocess(process_name = \"scale_iv\", 'mutate({ivs} = scale({ivs}))') |>   add_preprocess(process_name = \"scale_mod\", mutate({mods} := scale({mods}))) |>   add_model(lm({dvs} ~ {ivs} * {mods})) |>   add_model(\"lm({dvs} ~ {ivs} * {mods} + cov1)\") # can be unquoted or quoted #> # A tibble: 19 × 3 #>    type       group     code                                #>    <chr>      <chr>     <chr>                               #>  1 variables  ivs       iv1                                 #>  2 variables  ivs       iv2                                 #>  3 variables  ivs       iv3                                 #>  4 variables  dvs       dv1                                 #>  5 variables  dvs       dv2                                 #>  6 variables  mods      mod1                                #>  7 variables  mods      mod2                                #>  8 variables  mods      mod3                                #>  9 filters    include1  include1 == 0                       #> 10 filters    include1  include1 %in% unique(include1)      #> 11 filters    include2  include2 != 3                       #> 12 filters    include2  include2 != 2                       #> 13 filters    include2  include2 %in% unique(include2)      #> 14 filters    include3  scale(include3) > -2.5              #> 15 filters    include3  include3 %in% unique(include3)      #> 16 preprocess scale_iv  mutate({ivs} = scale({ivs}))        #> 17 preprocess scale_mod mutate(`:=`({mods}, scale({mods}))) #> 18 models     model     lm({dvs} ~ {ivs} * {mods})          #> 19 models     model     lm({dvs} ~ {ivs} * {mods} + cov1)"},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":"Add arbitrary postprocessing code multiverse pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":"","code":"add_postprocess(.df, postprocess_name, code)"},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":".df original data.frame (e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. postprocess_name character string. descriptive name postprocessing step accomplishes. code literal code like execute analysis. code written work pipes (.e., |> %>%). post-processing code comes last multiverse analysis step, chosen model object passed post-processing code. example, fit simple linear model like: lm(y ~ x1 + x2), post-processing code executes call anova, simply pass anova() add_postprocess(). underlying code : data |> filters |> lm(y ~ x1 + x2, data = _) |> anova()","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_preprocess(process_name = \"scale_iv\", 'mutate({ivs} = scale({ivs}))') |>   add_preprocess(process_name = \"scale_mod\", mutate({mods} := scale({mods}))) |>   add_model(lm({dvs} ~ {ivs} * {mods})) |>   add_model(lm({dvs} ~ {ivs} * {mods} + cov1)) |>   add_postprocess(\"aov\", aov()) #> # A tibble: 20 × 3 #>    type        group     code                                #>    <chr>       <chr>     <chr>                               #>  1 variables   ivs       iv1                                 #>  2 variables   ivs       iv2                                 #>  3 variables   ivs       iv3                                 #>  4 variables   dvs       dv1                                 #>  5 variables   dvs       dv2                                 #>  6 variables   mods      mod1                                #>  7 variables   mods      mod2                                #>  8 variables   mods      mod3                                #>  9 filters     include1  include1 == 0                       #> 10 filters     include1  include1 %in% unique(include1)      #> 11 filters     include2  include2 != 3                       #> 12 filters     include2  include2 != 2                       #> 13 filters     include2  include2 %in% unique(include2)      #> 14 filters     include3  scale(include3) > -2.5              #> 15 filters     include3  include3 %in% unique(include3)      #> 16 preprocess  scale_iv  mutate({ivs} = scale({ivs}))        #> 17 preprocess  scale_mod mutate(`:=`({mods}, scale({mods}))) #> 18 models      model     lm({dvs} ~ {ivs} * {mods})          #> 19 models      model     lm({dvs} ~ {ivs} * {mods} + cov1)   #> 20 postprocess aov       aov()"},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":"Add arbitrary preprocessing code multiverse analysis pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":"","code":"add_preprocess(.df, process_name, code)"},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":".df original data.frame (e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. process_name character string. descriptive name preprocessing step accomplishes. code literal code like execute data filtered. glue syntax allowed. example might centering scaling predictor appropriate filters applied data. code written work pipes (.e., |> %>%). Pre-processing code eventually take base data along filters applied data. means mutate calls natural functions take data.frame first argument work well (long also return data.frame).","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_preprocess(process_name = \"scale_iv\", 'mutate({ivs} = scale({ivs}))') |> # can be quoted or unquoted   add_preprocess(process_name = \"scale_mod\", mutate({mods} := scale({mods}))) #> # A tibble: 17 × 3 #>    type       group     code                                #>    <chr>      <chr>     <chr>                               #>  1 variables  ivs       iv1                                 #>  2 variables  ivs       iv2                                 #>  3 variables  ivs       iv3                                 #>  4 variables  dvs       dv1                                 #>  5 variables  dvs       dv2                                 #>  6 variables  mods      mod1                                #>  7 variables  mods      mod2                                #>  8 variables  mods      mod3                                #>  9 filters    include1  include1 == 0                       #> 10 filters    include1  include1 %in% unique(include1)      #> 11 filters    include2  include2 != 3                       #> 12 filters    include2  include2 != 2                       #> 13 filters    include2  include2 %in% unique(include2)      #> 14 filters    include3  scale(include3) > -2.5              #> 15 filters    include3  include3 %in% unique(include3)      #> 16 preprocess scale_iv  mutate({ivs} = scale({ivs}))        #> 17 preprocess scale_mod mutate(`:=`({mods}, scale({mods})))"},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a set of descriptiove statistics to compute over a set of variables — add_summary_stats","title":"Add a set of descriptiove statistics to compute over a set of variables — add_summary_stats","text":"Add set descriptiove statistics compute set variables","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a set of descriptiove statistics to compute over a set of variables — add_summary_stats","text":"","code":"add_summary_stats(.df, var_set, variables, stats)"},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a set of descriptiove statistics to compute over a set of variables — add_summary_stats","text":".df original data.frame (e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. var_set character string. name set summary statistics variables variables like compute summary statistics. can also use tidyselect select variables. stats character vector stat names (e.g., c(\"mean\",\"sd\")). responsible loading packages compute preferred summary statistics. Summary statistic functions must work inside summarize.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a set of descriptiove statistics to compute over a set of variables — add_summary_stats","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a set of descriptiove statistics to compute over a set of variables — add_summary_stats","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) |>   add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>   add_summary_stats(\"dv_stats\", starts_with(\"dv\"), c(\"skewness\", \"kurtosis\")) #> # A tibble: 16 × 3 #>    type          group    code                                                   #>    <chr>         <chr>    <chr>                                                  #>  1 variables     ivs      \"iv1\"                                                  #>  2 variables     ivs      \"iv2\"                                                  #>  3 variables     ivs      \"iv3\"                                                  #>  4 variables     dvs      \"dv1\"                                                  #>  5 variables     dvs      \"dv2\"                                                  #>  6 variables     mods     \"mod1\"                                                 #>  7 variables     mods     \"mod2\"                                                 #>  8 variables     mods     \"mod3\"                                                 #>  9 filters       include1 \"include1 == 0\"                                        #> 10 filters       include1 \"include1 %in% unique(include1)\"                       #> 11 filters       include2 \"include2 != 3\"                                        #> 12 filters       include2 \"include2 %in% unique(include2)\"                       #> 13 filters       include3 \"scale(include3) > -2.5\"                               #> 14 filters       include3 \"include3 %in% unique(include3)\"                       #> 15 summary_stats iv_stats \"summarize(across(c(starts_with(\\\"iv\\\")),list(mean = … #> 16 summary_stats dv_stats \"summarize(across(c(starts_with(\\\"dv\\\")),list(skewnes…"},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a set of variable alternatives to a multiverse pipeline — add_variables","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":"Add set variable alternatives multiverse pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":"","code":"add_variables(.df, var_group, ...)"},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":".df original data.frame (e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. var_group character string. Indicates name current set. example, \"primary_iv\" indicate set alternatives main predictor analysis. ... bare unquoted names variables include alternative options variable set. can also use tidyselect select variables.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) #> # A tibble: 8 × 3 #>   type      group code  #>   <chr>     <chr> <chr> #> 1 variables ivs   iv1   #> 2 variables ivs   iv2   #> 3 variables ivs   iv3   #> 4 variables dvs   dv1   #> 5 variables dvs   dv2   #> 6 variables mods  mod1  #> 7 variables mods  mod2  #> 8 variables mods  mod3"},{"path":"https://ethan-young.github.io/multitool/reference/combine_all_grids.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine grids of analysis decisions into a single tibble — combine_all_grids","title":"Combine grids of analysis decisions into a single tibble — combine_all_grids","text":"Combine grids analysis decisions single tibble","code":""},{"path":"https://ethan-young.github.io/multitool/reference/combine_all_grids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine grids of analysis decisions into a single tibble — combine_all_grids","text":"","code":"combine_all_grids(   .df,   var_grid = NULL,   filter_grid = NULL,   model_grid = NULL,   preprocessing = NULL,   postprocessing = NULL )"},{"path":"https://ethan-young.github.io/multitool/reference/combine_all_grids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine grids of analysis decisions into a single tibble — combine_all_grids","text":".df data.frame representing original data var_grid tibble created create_var_grid. grid contain different versions variables sets different versions variables. filter_grid tibble created create_filter_grid. grid contains observation (row) filtering decisions. model_grid tibble created create_model_grid. grid contains actual model syntax (possible alternatives) run specified grids. preprocessing tibble created create_preprocess. contain code want run just filtering analysis postprocessing tibble created create_postprocess. contain code executes post hoc processing analysis model object specified model_grid. something like standardizing coefficients running post hoc analysis (e.g., simple slopes).","code":""},{"path":"https://ethan-young.github.io/multitool/reference/combine_all_grids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine grids of analysis decisions into a single tibble — combine_all_grids","text":"output function tibble combinations analysis decisions. contains following columns: decision numeric column 1 n combinations decisions filters Filters (included) list column. variables Variable combinations list column model model, based decisions, fit. preprocess pre-processing steps contained list column postprocess post-processing tasks contained list column","code":""},{"path":"https://ethan-young.github.io/multitool/reference/combine_all_grids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine grids of analysis decisions into a single tibble — combine_all_grids","text":"","code":"library(tidyverse) library(multitool) ## Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  ## Create variable grid my_var_grid <-   create_var_grid(     .df = the_data,     iv  = c(iv1, iv2, iv3),     mod = c(mod1, mod2, mod3),     dv  = c(dv1, dv2),     cov = c(cov1, cov2)   ) #> cov variable group has 2 alternative variables #> dv variable group has 2 alternative variables #> iv variable group has 3 alternative variables #> mod variable group has 3 alternative variables #> 36 combinations (2*2*3*3 = 36)  ## Create a filter grid my_filter_grid <-   create_filter_grid(     .df = the_data,     include1 == 0,     include2 != 3,     include2 != 2,     scale(include3) > -2.5   ) #> filters involving include1 has 2 alternative filtering criteria #> filters involving include2 has 3 alternative filtering criteria #> filters involving include3 has 2 alternative filtering criteria #> 12 combinations (2*3*2 = 12)  ## Create model grid my_model_grid <-   create_model_grid(     lm({dv} ~ {iv} * {mod}),     lm({dv} ~ {iv} * {mod} + {cov})   ) #> Your model has 2 alternatives   ## Add arbitrary code  # Code to execute after filtering step my_preprocess <-   create_preprocess(     mutate({iv} := scale({iv}) |> as.numeric())   )  # Code to execute after analysis is done my_postprocess <-   create_postprocess(     aov()   )  ## Combine all grids together my_full_grid <-   combine_all_grids(     the_data,     my_var_grid,     my_filter_grid,     my_model_grid,     my_preprocess,     my_postprocess   ) #> cov (variable) has 2 alternatives #> dv (variable) has 2 alternatives #> iv (variable) has 3 alternatives #> mod (variable) has 3 alternatives #> include1 (filter) has 2 alternatives #> include2 (filter) has 3 alternatives #> include3 (filter) has 2 alternatives #> model has 2 alternatives #> 864 combinations (2*2*3*3*2*3*2*2 = 864)"},{"path":"https://ethan-young.github.io/multitool/reference/create_corr_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — create_corr_grid","title":"Title — create_corr_grid","text":"Title","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_corr_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — create_corr_grid","text":"","code":"create_corr_grid(.df, ..., focus_vars, add_stretch = FALSE)"},{"path":"https://ethan-young.github.io/multitool/reference/create_corr_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — create_corr_grid","text":".df base dataset ... blah blah focus_vars blah blah add_stretch blah blah","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_corr_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — create_corr_grid","text":"correlation grid","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_corr_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — create_corr_grid","text":"","code":"sum(c(1,2,3,4)) #> [1] 10"},{"path":"https://ethan-young.github.io/multitool/reference/create_desc_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — create_desc_grid","title":"Title — create_desc_grid","text":"Title","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_desc_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — create_desc_grid","text":"","code":"create_desc_grid(.df, ..., stats)"},{"path":"https://ethan-young.github.io/multitool/reference/create_desc_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — create_desc_grid","text":".df base dataset ... blah blah focus_vars blah blah add_stretch blah blah","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_desc_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — create_desc_grid","text":"correlation grid","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_desc_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — create_desc_grid","text":"","code":"sum(c(1,2,3,4)) #> [1] 10"},{"path":"https://ethan-young.github.io/multitool/reference/create_filter_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create all combinations of filtering decisions for exploring exclusion criteria — create_filter_grid","title":"Create all combinations of filtering decisions for exploring exclusion criteria — create_filter_grid","text":"Create combinations filtering decisions exploring exclusion criteria","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_filter_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create all combinations of filtering decisions for exploring exclusion criteria — create_filter_grid","text":"","code":"create_filter_grid(.df, ...)"},{"path":"https://ethan-young.github.io/multitool/reference/create_filter_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create all combinations of filtering decisions for exploring exclusion criteria — create_filter_grid","text":".df actual data data.frame want create filtering decisions ... logical expressions used filter separated commas. Expressions quoted.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_filter_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create all combinations of filtering decisions for exploring exclusion criteria — create_filter_grid","text":"list four components: summary summary tibble filters following columns: filter_expr (filtering code), filter_group (variable filter apply ), filtered_n (many observations filter),  filter_type (expression filter nothing, auto-generated). combinations summary number alternatives per filtering decision n_combinations total number filtering combinations grid actual filtering grid, number rows = n_combinations.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_filter_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create all combinations of filtering decisions for exploring exclusion criteria — create_filter_grid","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  my_filter_grid <-   create_filter_grid(     .df = the_data,     include1 == 0,     include2 != 3,     include2 != 2,     scale(include3) > -2.5   ) #> filters involving include1 has 2 alternative filtering criteria #> filters involving include2 has 3 alternative filtering criteria #> filters involving include3 has 2 alternative filtering criteria #> 12 combinations (2*3*2 = 12)  my_filter_grid #> $summary #> # A tibble: 7 × 4 #>   filter_expr                    filter_group filtered_n filter_type #>   <chr>                          <chr>             <int> <chr>       #> 1 include1 == 0                  include1            457 filter      #> 2 include1 %in% unique(include1) include1            500 do nothing  #> 3 include2 != 3                  include2            337 filter      #> 4 include2 != 2                  include2            337 filter      #> 5 include2 %in% unique(include2) include2            500 do nothing  #> 6 scale(include3) > -2.5         include3            498 filter      #> 7 include3 %in% unique(include3) include3            500 do nothing  #>  #> $combinations #> # A tibble: 3 × 2 #>   filter_group n_alternatives #>   <chr>                 <int> #> 1 include1                  2 #> 2 include2                  3 #> 3 include3                  2 #>  #> $n_combinations #> [1] 12 #>  #> $grid #> # A tibble: 12 × 3 #>    include1                       include2                       include3        #>    <chr>                          <chr>                          <chr>           #>  1 include1 == 0                  include2 != 3                  scale(include3… #>  2 include1 == 0                  include2 != 3                  include3 %in% … #>  3 include1 == 0                  include2 != 2                  scale(include3… #>  4 include1 == 0                  include2 != 2                  include3 %in% … #>  5 include1 == 0                  include2 %in% unique(include2) scale(include3… #>  6 include1 == 0                  include2 %in% unique(include2) include3 %in% … #>  7 include1 %in% unique(include1) include2 != 3                  scale(include3… #>  8 include1 %in% unique(include1) include2 != 3                  include3 %in% … #>  9 include1 %in% unique(include1) include2 != 2                  scale(include3… #> 10 include1 %in% unique(include1) include2 != 2                  include3 %in% … #> 11 include1 %in% unique(include1) include2 %in% unique(include2) scale(include3… #> 12 include1 %in% unique(include1) include2 %in% unique(include2) include3 %in% … #>"},{"path":"https://ethan-young.github.io/multitool/reference/create_model_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a modeling grid — create_model_grid","title":"Create a modeling grid — create_model_grid","text":"Create modeling grid","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_model_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a modeling grid — create_model_grid","text":"","code":"create_model_grid(...)"},{"path":"https://ethan-young.github.io/multitool/reference/create_model_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a modeling grid — create_model_grid","text":"... literal model syntax (quotes) like run. can use glue inside formulas dynamically generate variable names based variable grid. example, make variable grid two versions IVs (e.g., iv1 iv2), can write formula like : lm(happiness ~ {iv} + control_var). requirement variables written formula actually exist underlying data. also responsible loading packages run particular model (e.g., lme4 mixed-models)","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_model_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a modeling grid — create_model_grid","text":"\\ list four components: summary summary tibble models chosen. combinations summary number alternatives models n_combinations total number model combinations grid actual modeling grid, number rows = n_combinations.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_model_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a modeling grid — create_model_grid","text":"","code":"library(tidyverse) library(multitool)  my_model_grid <-   create_model_grid(     lm({dv} ~ {iv} * {mod}),     lm({dv} ~ {iv} * {mod} + {cov})   ) #> Your model has 2 alternatives"},{"path":"https://ethan-young.github.io/multitool/reference/create_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Add arbitrary post hoc code to execute after each analysis — create_postprocess","title":"Add arbitrary post hoc code to execute after each analysis — create_postprocess","text":"Add arbitrary post hoc code execute analysis","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add arbitrary post hoc code to execute after each analysis — create_postprocess","text":"","code":"create_postprocess(...)"},{"path":"https://ethan-young.github.io/multitool/reference/create_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add arbitrary post hoc code to execute after each analysis — create_postprocess","text":"... literal code block (unquoted) like execute analysis. multiple post processing tasks, separate distinct code chunk comma. code written work pipes (.e., |> %>%). post hoc code comes last multiverse analysis step, chosen model object passed post-processing code. example, fit simple linear model like: lm(y ~ x1 + x2), post hoc code executes call anova, simply pass anova() create_postprocess(). underlying code : data |> filters |> lm(y ~ x1 + x2, data = _) |> anova()","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add arbitrary post hoc code to execute after each analysis — create_postprocess","text":"tibble  two columns, \"postprocess\" \"code\". row representing post processing task execute. \"postprocess\" column indicates order (although arbitrary) \"code\" column literal code ran. can add arguments code normally. Always assume model fit passed first argument. However, example, wanted fit simple slopes test sim_slopes, use glue syntax. example: sim_slopes(pred = {iv}, modx = {mod}) combine_all_grids populate variables variable grid.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add arbitrary post hoc code to execute after each analysis — create_postprocess","text":"","code":"library(tidyverse) library(multitool)"},{"path":"https://ethan-young.github.io/multitool/reference/create_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Add arbitrary pre-processing code to execute after data are filtered (but\nbefore analysis) — create_preprocess","title":"Add arbitrary pre-processing code to execute after data are filtered (but\nbefore analysis) — create_preprocess","text":"Add arbitrary pre-processing code execute data filtered (analysis)","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add arbitrary pre-processing code to execute after data are filtered (but\nbefore analysis) — create_preprocess","text":"","code":"create_preprocess(...)"},{"path":"https://ethan-young.github.io/multitool/reference/create_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add arbitrary pre-processing code to execute after data are filtered (but\nbefore analysis) — create_preprocess","text":"... literal code like execute data filtered. glue syntax allowed. example might centering scaling predictor appropriate filters applied data.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add arbitrary pre-processing code to execute after data are filtered (but\nbefore analysis) — create_preprocess","text":"tibble  two columns, \"preprocess\" \"code\". row representing pre-processing step execute. values \"preprocess\" column indicate order (e.g., step1, step2, etc.) \"code\" column literal code ran. code must written |> (pipe) format. Assume original data filtering decisions (), passed directly pre-processing code. want manipulate variable part variable grid created create_var_grid, can use glue syntax indicate variable group (e.g., ivs). grids combined combine_all_grids, variables corresponding particular decisions set  evaluated glue syntax.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add arbitrary pre-processing code to execute after data are filtered (but\nbefore analysis) — create_preprocess","text":"","code":"library(tidyverse) library(multitool)  # All in one step my_preprocess_v1 <-   create_preprocess(     mutate(       {iv} := as.numeric(scale({iv})), {mod} := as.numeric(scale({mod}))     )   )  # In two steps my_preprocess_v2 <-   create_preprocess(     mutate({iv} := scale({iv}) |> as.numeric()),     mutate({mod} := scale({mod}) |> as.numeric())   )"},{"path":"https://ethan-young.github.io/multitool/reference/create_var_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a grid of all combinations of variables — create_var_grid","title":"Create a grid of all combinations of variables — create_var_grid","text":"Create grid combinations variables","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_var_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a grid of all combinations of variables — create_var_grid","text":"","code":"create_var_grid(.df, ...)"},{"path":"https://ethan-young.github.io/multitool/reference/create_var_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a grid of all combinations of variables — create_var_grid","text":".df actual data data.frame variables include grid ... named vectors names indicating category variable. example, want test self esteem affects happiness may two variables measure self-esteem. add variables multiverse explore variable matters (alongside decisions). case, add self_esteem = c(self_esteem1,   self_esteem2) create grid variables. practice, can add kind general variable categories e.g., ivs, dvs, covariates etc.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_var_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a grid of all combinations of variables — create_var_grid","text":"\\ list four components: summary summary tibble variables chosen. combinations summary number alternatives variables variable group n_combinations total number variable combinations grid actual variable grid, number rows = n_combinations.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_var_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a grid of all combinations of variables — create_var_grid","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(    id   = 1:500,    iv1  = rnorm(500),    iv2  = rnorm(500),    iv3  = rnorm(500),    covariate1 = rnorm(500),    covariate2 = rnorm(500),    dv1 = rnorm(500),    dv2 = rnorm(500),    filter1   = sample(1:3, size = 500, replace = TRUE),    filter2   = rnorm(500),    filter3   = rbinom(500, size = 1, prob = .1),    filter4   = rbinom(500, size = 1, prob = .1)   )  my_var_grid <-  create_var_grid(    .df = the_data,    iv = c(iv1, iv2, iv3),    dv = c(dv1, dv2),    covariates = c(covariate1, covariate2)  ) #> covariates variable group has 2 alternative variables #> dv variable group has 2 alternative variables #> iv variable group has 3 alternative variables #> 12 combinations (2*2*3 = 12)"},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":"Expand set multiverse decisions possible combinations","code":""},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":"","code":"expand_decisions(.grid)"},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":".grid ddata.frame produced calling series add_* functions.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":"nested data.frame containing combinations arbitrary decisions multiverse analysis. Decision types become list columns matching type decisions called along pipeline (e.g., filters, variables, etc.). decisions containing glue syntax populated relevant information.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  full_pipeline <-   the_data |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_preprocess(process_name = \"scale_iv\", 'mutate({ivs} = scale({ivs}))') |>   add_preprocess(process_name = \"scale_mod\", mutate({mods} := scale({mods}))) |>   add_model(lm({dvs} ~ {ivs} * {mods})) |>   add_model(lm({dvs} ~ {ivs} * {mods} + cov1)) |>   add_postprocess(\"aov\", aov()) |>   add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>   add_summary_stats(\"dv_stats\", starts_with(\"dv\"), c(\"skewness\", \"kurtosis\")) |>   add_corrs(\"predictors\", matches(\"iv|mod|cov\"), focus = c(cov1,cov2)) |>   add_corrs(\"outcomes\", matches(\"dv\")) |>   add_alpha(\"unp_scale\", c(iv1,iv2,iv3)) |>   expand_decisions() #> Error in add_alpha(add_corrs(add_corrs(add_summary_stats(add_summary_stats(add_postprocess(add_model(add_model(add_preprocess(add_preprocess(add_filters(add_variables(add_variables(add_variables(the_data,     \"ivs\", iv1, iv2, iv3), \"dvs\", dv1, dv2), \"mods\", starts_with(\"mod\")),     include1 == 0, include2 != 3, include2 != 2, scale(include3) >         -2.5), process_name = \"scale_iv\", \"mutate({ivs} = scale({ivs}))\"),     process_name = \"scale_mod\", mutate(`:=`({        mods    }, scale({        mods    })))), lm({    dvs} ~ {    ivs} * {    mods})), lm({    dvs} ~ {    ivs} * {    mods} + cov1)), \"aov\", aov()), \"iv_stats\", starts_with(\"iv\"), c(\"mean\",     \"sd\")), \"dv_stats\", starts_with(\"dv\"), c(\"skewness\", \"kurtosis\")),     \"predictors\", matches(\"iv|mod|cov\"), focus = c(cov1, cov2)),     \"outcomes\", matches(\"dv\")), \"unp_scale\", c(iv1, iv2, iv3)): could not find function \"add_alpha\"  full_pipeline #> # A tibble: 432 × 9 #>    decision variables        filters  preprocess models   postprocess corrs    #>    <chr>    <list>           <list>   <list>     <list>   <list>      <list>   #>  1 1        <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #>  2 2        <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #>  3 3        <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #>  4 4        <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #>  5 5        <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #>  6 6        <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #>  7 7        <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #>  8 8        <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #>  9 9        <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #> 10 10       <tibble [1 × 3]> <tibble> <tibble>   <tibble> <tibble>    <tibble> #> # … with 422 more rows, and 2 more variables: summary_stats <list>, #> #   cron_alphas <list>"},{"path":"https://ethan-young.github.io/multitool/reference/report_universe_console.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'universe' console report — report_universe_console","title":"Create a 'universe' console report — report_universe_console","text":"Create 'universe' console report","code":""},{"path":"https://ethan-young.github.io/multitool/reference/report_universe_console.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'universe' console report — report_universe_console","text":"","code":"report_universe_console(multiverse, decision_num)"},{"path":"https://ethan-young.github.io/multitool/reference/report_universe_console.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 'universe' console report — report_universe_console","text":"multiverse tibble created run_multiverse decision_num decision set create report ","code":""},{"path":"https://ethan-young.github.io/multitool/reference/report_universe_console.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'universe' console report — report_universe_console","text":"","code":"if (FALSE) { my_multi_results <- run_multiverse(my_grid, .df)  report_universe_console(my_multi_verse, .df, 1) }"},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a multiverse based on a complete decision grid — run_multiverse","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":"Run multiverse based complete decision grid","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":"","code":"run_multiverse(.grid, save_model = FALSE, ncores = 1)"},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":".grid tibble produced combine_all_grids save_model logical, indicates whether save model object entirety. default FALSE model objects usually large hood, tidy glance used summarize useful model information. ncores numeric. number cores want use parallel processing.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":"single tibble containing tidied results model post-processing tests/tasks. unique test (e.g., lm aov called lm), list column function name created tidy glance warnings messages printed fitting models. Internally, modeling post-processing functions checked see tidy glance methods available. , summary called instead.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":"","code":"if (FALSE) { run_multiverse(data, grid) }"},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a single set of arbitrary decisions and save the result — run_universe_model","title":"Run a single set of arbitrary decisions and save the result — run_universe_model","text":"Run single set arbitrary decisions save result","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a single set of arbitrary decisions and save the result — run_universe_model","text":"","code":"run_universe_model(.grid, decision_num, save_model = FALSE)"},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a single set of arbitrary decisions and save the result — run_universe_model","text":".grid tibble produced combine_all_grids decision_num single integer 1 nrow(grid) indicating specific decision set run save_model logical, indicates whether save model object entirety. default FALSE model objects usually large hood, tidy glance used summarize useful model information.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a single set of arbitrary decisions and save the result — run_universe_model","text":"single row tibble containing decision, code ran, results, notes (e.g., warnings messages).","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a single set of arbitrary decisions and save the result — run_universe_model","text":"","code":"if (FALSE) { run_universe(.grid, .df, decision_num) }"},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_summary_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute summary statistics for a single decision set — run_universe_summary_stats","title":"Compute summary statistics for a single decision set — run_universe_summary_stats","text":"Compute summary statistics single decision set","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_summary_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute summary statistics for a single decision set — run_universe_summary_stats","text":"","code":"run_universe_summary_stats(.grid, decision_num)"},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_summary_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute summary statistics for a single decision set — run_universe_summary_stats","text":".grid data.frame resulting expand_decisions decision_num index particular decision set want run","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_summary_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute summary statistics for a single decision set — run_universe_summary_stats","text":"single row data.frame list columns containing summary statistics specified .grid","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_universe_summary_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute summary statistics for a single decision set — run_universe_summary_stats","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  summary_stats_grid <-   the_data |>     add_variables(\"ivs\", iv1, iv2, iv3) |>     add_variables(\"dvs\", dv1, dv2) |>     add_variables(\"mods\", starts_with(\"mod\")) |>     add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) |>     add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>     add_summary_stats(\"dv_stats\", starts_with(\"dv\"), c(\"skewness\", \"kurtosis\"))  run_universe_summary_stats(summary_stats_grid, decision_num  = 12) #> Error in dplyr::filter(.grid, decision == decision_num): Problem while computing `..1 = decision == decision_num`. #> Caused by error in `mask$eval_all_filter()`: #> ! object 'decision' not found"},{"path":"https://ethan-young.github.io/multitool/reference/show_code_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Show multiverse data code pipelines — show_code_filter","title":"Show multiverse data code pipelines — show_code_filter","text":"show_code* function self-explanatory - indicate along multiverse pipeline extract code. goal functions create window multiverse decision set context/results allow user inspect specific decisions straight code produced .","code":""},{"path":"https://ethan-young.github.io/multitool/reference/show_code_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show multiverse data code pipelines — show_code_filter","text":"","code":"show_code_filter(.grid, decision_num, copy = F)  show_code_preprocess(.grid, decision_num, copy = F)  show_code_model(.grid, decision_num, copy = F)  show_code_postprocess(.grid, decision_num, copy = F)  show_code_summary_stats(.grid, decision_num, copy = F)  show_code_corrs(.grid, decision_num, copy = F)  show_code_cron_alpha(.grid, decision_num, copy = F)"},{"path":"https://ethan-young.github.io/multitool/reference/show_code_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show multiverse data code pipelines — show_code_filter","text":".grid full decision grid created combine_all_grids decision_num numeric. Indicates 'universe' multiverse show underlying code. copy logical. Whether copy pipeline code clipboard using write_clip.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/show_code_filter.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Show multiverse data code pipelines — show_code_filter","text":"show_code_preprocess: Show code preprocessing stage show_code_model: Show code modeling stage show_code_postprocess: Show code post-processing stage show_code_summary_stats: Show code computing summary statistics show_code_corrs: Show code computing correlations show_code_cron_alpha: Show code computing correlations","code":""}]
